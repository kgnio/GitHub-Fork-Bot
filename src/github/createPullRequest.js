// src/github/createPullRequest.js
const { Octokit } = require("@octokit/rest");
const { getPRBodies } = require("../templates/prBodies");
const { getPRTitles } = require("../templates/prTitles");
const config = require("../config");
const path = require("path");

/**
 * Creates a PR or returns an existing one if it already exists.
 *
 * @param {Object} options
 * @param {string} options.owner
 * @param {string} options.repo
 * @param {string} options.forkOwner
 * @param {string} options.branch
 * @param {Object} options.repoMeta
 * @param {boolean} options.commitWasPushed
 * @param {string} options.dynamicBody - Markdown generated by generateDynamicPRMessage
 */
async function createPullRequest({
  owner,
  repo,
  forkOwner,
  branch,
  repoMeta,
  commitWasPushed,
  dynamicBody,
}) {
  if (!commitWasPushed) {
    console.log("‚ÑπÔ∏è Skipping PR because no commit was pushed.");
    return null;
  }

  const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
  const headRef = `${forkOwner}:${branch}`;

  // 1. Check if there is already an open PR
  try {
    const { data: prs } = await octokit.pulls.list({
      owner,
      repo,
      state: "open",
      head: headRef,
    });
    if (prs.length > 0) {
      console.warn("‚ö†Ô∏è An open PR already exists:", prs[0].html_url);
      return { html_url: prs[0].html_url, alreadyExists: true };
    }
  } catch (err) {
    console.error("‚ùå Error while checking for existing PR:", err.message);
  }

  // 2. Random PR creation probability
  if (Math.random() > config.PR_PROBABILITY) {
    console.log("ü§ñ PR was not created this time (random policy).");
    return null;
  }

  // 3. Title and fallback body
  const titles = getPRTitles();
  const prTitle = titles[Math.floor(Math.random() * titles.length)];
  const bodies = getPRBodies(repoMeta);
  const fallbackBody = bodies[Math.floor(Math.random() * bodies.length)];

  // 4. Combine into a single body: dynamicBody + separator + fallbackBody
  const prBody = [dynamicBody.trim(), "\n---\n", fallbackBody.trim()].join(
    "\n"
  );

  // 5. Create the PR
  try {
    const { data: pr } = await octokit.pulls.create({
      owner,
      repo,
      head: headRef,
      base: branch,
      title: prTitle,
      body: prBody,
    });
    console.log(`‚úÖ Pull Request created: ${pr.html_url}`);
    return pr;
  } catch (err) {
    console.error("‚ùå Error while creating PR:", err.message);
    return null;
  }
}

module.exports = { createPullRequest };
